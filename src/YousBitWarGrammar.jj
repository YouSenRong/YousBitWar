/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

/**
 * author: you
 * date: 2018/04/30
 */options{  static = false;
  debug_lookahead = false;
}
PARSER_BEGIN(YousBitWarParser)

import java.io.File;
import java.io.FileInputStream;
import java.util.Random;

public class YousBitWarParser{
  //敌方上一次的策略,0表示背叛,1表示合作
  private int Last_enermy_strategy = 0;
  //当前进行的回合数
  private int Current = 1;
  //此次采取的策略,0表示背叛,1表示合作
  private int Result = 0;
  //未匹配的花括号"{"的数量
  private int brace_num_global = 0;
  //标记是否已经发生return，
  private int return_flag_global = 0;
  //产生随机数
  Random random = new Random();
  private ExternData externData = new ExternData();
  public static void main(String args[]) throws  ParseException
  {
    File file = new File("strategy_4.txt");
    try
    {
      FileInputStream fileInputStream = new FileInputStream(file);
	  YousBitWarParser yousBitWarParser = new YousBitWarParser(fileInputStream);
	  switch (yousBitWarParser.program())	  {
	    case 0 :
	    	System.out.println("OK.");	    	break;	    case 1 : 	        System.out.println("Goodbye.");	        break;	        default : 	        break;
	  }	}	catch (Exception e)	{
	  System.out.println("NOK.");
	  System.out.println(e.getMessage());
	}	catch (Error e)	{
	  System.out.println("Oops.");	  System.out.println(e.getMessage());
	}
  }
  public int sent_message(int current, int last_enermy_strategy)
  {
    Current = current;
	Last_enermy_strategy = last_enermy_strategy;
	//在Enermy_ArrayList中添加敌方上一次采用的策略
   	externData.Enermy_ArrayList.add(Current-1, Last_enermy_strategy);
	//初始化未匹配的花括号" { "数量为0
	brace_num_global = 0;
	//初始化是否已经发生返回的标记变量，return_flag_global
	return_flag_global = 0;
	return 1;
  }
  public int get_result()
  {
    return this.Result;
  }
}
PARSER_END(YousBitWarParser)SKIP : /* WHITE SPACE */{  " "| "\r"| "\t"| "\n"
| "\f"}

//SPECIAL_TOKEN : /* COMMENTS */
SKIP :
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
| <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

TOKEN : /* RESERVED WORDS AND LITERALS */
{
  < STRATEGY: "Strategy" >
| < INT: "int" >
| < IF: "if" >
| < ELSEIF: "elseif" >
| < ELSE: "else" >
| < WHILE: "while" >
| < RETURN: "return" >
| < READ: "read" >
| < WRITE: "write" >
| < RANDOM: "Random" >
| < CURRENT: "Current" >
| < ENERMY: "Enermy" >
| < END: "END" >
}
TOKEN : /* OPERATORS */{
  < ASSIGN: "=" >
| < LT: "<" >
| < LE: "<=" >
| < EQ: "==" >
| < GE: ">=" >
| < GT: ">" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >| < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}

TOKEN : /* SEPARATORS */
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >}
TOKEN :{
  < ID: (< LETTER > | "_")(< LETTER > | "_" | < DIGIT >)* >| < CONSTANT : (< DIGIT >)+ >| < #DIGIT: [ "0"-"9" ] >
| < #LETTER: ["a"-"z", "A"-"Z"] >}
//program -> function_declaration
int program():
{
}
{
  function_statement()
  {
    return 1;
  }
}

//function_declaration -> <STRATEGY> <ID> statement_block
void function_statement():
{
}
{
  < STRATEGY > < ID > statement_block()
}

//statement_block -> "{ " statement_list "}"
void statement_block():
{
  Token temp_token;
}
{
  < LBRACE >
  {
    brace_num_global = brace_num_global + 1;
  }
  statement_list()
  < RBRACE >
  {
    brace_num_global = brace_num_global - 1;
	if( (return_flag_global == 1) && (brace_num_global == 1) )
	{
	  token = getNextToken();
	  while( !token.image.equals("END") )
	  {
	    token = getNextToken();
	  }
	}
  }
}

//statement_list -> (statement)*
void statement_list():
{
}
{
  (
    statement()
  )*
}

//statement -> variable_declaration | assign_statement | if_statement | while_statement | return_statement | statement_block
void statement():
{
}
{
  variable_declaration()
| assign_statement()
| if_statement()
| while_statement()
| return_statement()
  {
    return_flag_global = 1;
  }
| statement_block()
}

//variable_declaration -> INT ID (, ID)* ;
void variable_declaration():
{
  Token temp_token;
}
{
  < INT > temp_token = <ID >
  {
    if(externData.ID_HashMap.get(temp_token.image) == null)
    {
      externData.ID_HashMap.put(temp_token.image, 0);
    }
  }
  (< COMMA > temp_token = <ID >
  {
    if(externData.ID_HashMap.get(temp_token.image) == null)
    {
      externData.ID_HashMap.put(temp_token.image, 0);
    }
  } )*
  < SEMICOLON >
}


//assign_statement -> ID "=" expression ";"
void assign_statement():
{
  int value = 0;
  Token temp_token;
}
{
  temp_token = < ID >
  < ASSIGN >
  value = expression()
  < SEMICOLON >
  {
//    System.out.println("assign vlaue:" + value);
    if(externData.ID_HashMap.get(temp_token.image) != null)
    {
      externData.ID_HashMap.put(temp_token.image, value);
    }
  }
}

//if_statement -> "if" "(" expression ")" [statement_block]
void if_statement():
{
  int temp_value = 0;
  int temp_brace_num = 0;
}
{
  < IF >
  < LPAREN >
  temp_value = expression()
  < RPAREN >
  {
    if(temp_value != 1)
    {
     temp_brace_num = 0;
     token = getNextToken();
     if(token.image.equals("{"))
     {
       temp_brace_num = temp_brace_num + 1;
       brace_num_global = brace_num_global + 1;
     }
     while(temp_brace_num > 0)
     {
        token = getNextToken();
        if(token.image.equals("{"))
        {
          temp_brace_num = temp_brace_num + 1;
          brace_num_global = brace_num_global + 1;
        }
        else if(token.image.equals("}"))
        {
          temp_brace_num = temp_brace_num -1;
          brace_num_global = brace_num_global - 1;
        }
     }
   }
  }
  [statement_block()]
  (    < ELSEIF >
    {
    if(temp_value == 1)
    {
       temp_brace_num = 0;
       token = getNextToken();
       if(token.image.equals("{"))
       {
         temp_brace_num = temp_brace_num + 1;
         brace_num_global = brace_num_global + 1;
       }
       while(temp_brace_num > 0)
       {
          token = getNextToken();
          if(token.image.equals("{"))
          {
            temp_brace_num = temp_brace_num + 1;
            brace_num_global = brace_num_global + 1;
          }
          else if(token.image.equals("}"))
          {
            temp_brace_num = temp_brace_num -1;
            brace_num_global = brace_num_global - 1;
          }
        }
      }
    }
    < LPAREN > temp_value = expression() < RPAREN >
    {
      if(temp_value != 1)
      {
       temp_brace_num = 0;
       token = getNextToken();
       if(token.image.equals("{"))
       {
         temp_brace_num = temp_brace_num + 1;
         brace_num_global = brace_num_global + 1;
       }
       while(temp_brace_num > 0)
       {
          token = getNextToken();
          if(token.image.equals("{"))
          {
            temp_brace_num = temp_brace_num + 1;
            brace_num_global = brace_num_global + 1;
          }
          else if(token.image.equals("}"))
          {
            temp_brace_num = temp_brace_num -1;
            brace_num_global = brace_num_global - 1;
          }
       }
      }
   }
    [statement_block()]
  )*
  
  [ < ELSE >
  {
    if(temp_value == 1)
    {
      temp_brace_num = 0;
       token = getNextToken();
       if(token.image.equals("{"))
       {
         temp_brace_num = temp_brace_num + 1;
         brace_num_global = brace_num_global + 1;
       }
       while(temp_brace_num > 0)
       {
          token = getNextToken();
          if(token.image.equals("{"))
          {
            temp_brace_num = temp_brace_num + 1;
            brace_num_global = brace_num_global + 1;
          }
          else if(token.image.equals("}"))
          {
            temp_brace_num = temp_brace_num -1;
            brace_num_global = brace_num_global - 1;
          }
       }
    }
  }
   [statement_block()] ]
}


//while_statement -> "while" "(" expression ")" statement_block
void while_statement():
{
  int temp_value = 0;
  int temp_jj_gen = 0;
  int temp_brace_num = 0;
  Token temp_token;
}
{
  {
    temp_jj_gen = jj_gen;
    temp_token = token;
  }
  < WHILE > <LPAREN > temp_value = expression() < RPAREN >
  {
    if( temp_value != 1 )
    {
      temp_brace_num = 0;
      token = getNextToken();
      if(token.image.equals("{"))
      {
        temp_brace_num = temp_brace_num + 1;
        brace_num_global = brace_num_global + 1;
      }
      while(temp_brace_num > 0)
      {
        token = getNextToken();
        if(token.image.equals("{"))
        {
          temp_brace_num = temp_brace_num + 1;
          brace_num_global = brace_num_global + 1;
        }
        else if(token.image.equals("}"))
        {
          temp_brace_num = temp_brace_num -1;
          brace_num_global = brace_num_global - 1;
        }
      }
    }
  }
  [statement_block()]
  {
    if( temp_value == 1)
    {
      jj_gen = temp_jj_gen;
      token = temp_token;
    }
  }
}

//return_statement -> "return" expression;
void return_statement():
{
  int temp_value = 0;
}
{
  < RETURN >
  temp_value = expression()
  < SEMICOLON >
  {
    this.Result = temp_value;
    if(brace_num_global == 1)
    {
      token = getNextToken();
      while(!token.image.equals("END"))
      {
        token = getNextToken();
        if(token.image.equals("{"))
        {
          brace_num_global = brace_num_global + 1;
        }
        else if(token.image.equals("}"))
        {
          brace_num_global = brace_num_global - 1;
        }
      }
    }
  }
}

//expression -> logic_expression | <RANDOM> "(" <CONSTANT> ")" | ";"
int expression():
{
  int temp_value = 0;
  int value = 0;
  Token temp_token;
}
{
  value = logic_expression()
  {
    return value;
  }
| < RANDOM >
  < LPAREN >
  temp_token = < CONSTANT >
  < RPAREN >
  {
    temp_value = Integer.parseInt(temp_token.image);
    value = random.nextInt(temp_value);
    return value;
  }
}

//logic_expression -> relational_expression( ("||" | "&&") relational_expression)*
int logic_expression():
{
  int temp_value = 0;
  int value = 0;
}
{
  value = relation_expression()
  (    ( < SC_OR > temp_value = relation_expression()
      {
        value = value > temp_value ? value : temp_value;
        return value;
      }
    | < SC_AND > temp_value = relation_expression()
      {
        value = value * temp_value;
        return value;
      }
    )
  )*
  {
    return value;
  }
}

//relational_expression -> addictive_expression( ("<" | "<=" | "==" | ">=" | ">" | "!=") addictive_expression)*
int relation_expression():
{
  int temp_value = 0;
  int value = 0;
}
{
  value = addictive_expression()
  (    (      < LT > temp_value = addictive_expression()
      {
        value = value < temp_value ? 1:0;
        return value;
      }
    | < LE > temp_value = addictive_expression()
      {
        value = value <= temp_value ? 1:0;
        return value;
      }
    | < EQ > temp_value = addictive_expression()
      {
        value = value == temp_value ? 1:0;
        return value;
      }
    | < GE > temp_value = addictive_expression()
      {
        value = value >= temp_value ? 1:0;
        return value;
      }
    | < GT > temp_value = addictive_expression()
      {
        value = value > temp_value ? 1:0;
        return value;
      }
    | < NE > temp_value = addictive_expression()
      {
        value = value != temp_value ? 1:0;
        return value;
      }
    )
  )*
  {
    return value;
  }
}

//addictive_expression -> multiplicative_expression( ("+" | "-") multiplicative_expression)*
int addictive_expression():
{
  int temp_value = 0;
  int value = 0;
}
{
  value = multiplicative_expression()
  (
    (
      < PLUS > temp_value = multiplicative_expression()
      {
        value = value + temp_value;
        return value;
      }
    | < MINUS > temp_value = multiplicative_expression()
      {
        value = value - temp_value;
        return value;
      }
  	)
  )*
  {
    return value;
  }
}

//multiplicative_expression -> factor( ("*" | "/") factor)*
int multiplicative_expression():
{
  int temp_value = 0;
  int value = 0;
}
{
  value = factor()
  (    (      < MULTIPLY > temp_value = factor()
      {
        value = value * temp_value;
        return value;
      }
    | < DIVIDE > temp_value = factor()
      {
        value = value / temp_value;
        return value;
      }
    )
  )*
  {
    return value;
  }
}

//factor -> "(" expression ")" | <ID> | <ID> "[" <CONSTANT> "]" | <CONSTANT>
int factor():
{
  int temp_value = 0;
  Token temp_token;
}
{
  < LPAREN > temp_value = expression() < RPAREN >
  { return temp_value; }
| < CURRENT >
  {
    return Current;
  }
| < ENERMY > < LBRACKET > temp_value = expression() < RBRACKET >
  {
    return externData.Enermy_ArrayList.get(temp_value);
  }
| temp_token = < ID >
  {
    return externData.ID_HashMap.get(temp_token.image);
  }
| temp_token = < CONSTANT >
  {
    temp_value = Integer.parseInt(temp_token.image);
    return temp_value;
  }
}
