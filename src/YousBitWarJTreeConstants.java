/* Generated By:JJTree&JavaCC: Do not edit this line. YousBitWarJTreeConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface YousBitWarJTreeConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int STRATEGY = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int IF = 9;
  /** RegularExpression Id. */
  int ELSEIF = 10;
  /** RegularExpression Id. */
  int ELSE = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int RETURN = 13;
  /** RegularExpression Id. */
  int RANDOM = 14;
  /** RegularExpression Id. */
  int CURRENT = 15;
  /** RegularExpression Id. */
  int ENERMY = 16;
  /** RegularExpression Id. */
  int END = 17;
  /** RegularExpression Id. */
  int ASSIGN = 18;
  /** RegularExpression Id. */
  int LT = 19;
  /** RegularExpression Id. */
  int LE = 20;
  /** RegularExpression Id. */
  int EQ = 21;
  /** RegularExpression Id. */
  int GE = 22;
  /** RegularExpression Id. */
  int GT = 23;
  /** RegularExpression Id. */
  int NE = 24;
  /** RegularExpression Id. */
  int SC_OR = 25;
  /** RegularExpression Id. */
  int SC_AND = 26;
  /** RegularExpression Id. */
  int PLUS = 27;
  /** RegularExpression Id. */
  int MINUS = 28;
  /** RegularExpression Id. */
  int MULTIPLY = 29;
  /** RegularExpression Id. */
  int DIVIDE = 30;
  /** RegularExpression Id. */
  int LPAREN = 31;
  /** RegularExpression Id. */
  int RPAREN = 32;
  /** RegularExpression Id. */
  int LBRACE = 33;
  /** RegularExpression Id. */
  int RBRACE = 34;
  /** RegularExpression Id. */
  int LBRACKET = 35;
  /** RegularExpression Id. */
  int RBRACKET = 36;
  /** RegularExpression Id. */
  int SEMICOLON = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int DOT = 39;
  /** RegularExpression Id. */
  int ID = 40;
  /** RegularExpression Id. */
  int CONSTANT = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int LETTER = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"Strategy\"",
    "\"int\"",
    "\"if\"",
    "\"elseif\"",
    "\"else\"",
    "\"while\"",
    "\"return\"",
    "\"Random\"",
    "\"Current\"",
    "\"Enermy\"",
    "\"END\"",
    "\"=\"",
    "\"<\"",
    "\"<=\"",
    "\"==\"",
    "\">=\"",
    "\">\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "<ID>",
    "<CONSTANT>",
    "<DIGIT>",
    "<LETTER>",
  };

}
